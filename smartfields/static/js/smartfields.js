// Generated by CoffeeScript 1.4.0
(function() {
  var smartfields, transitionEnd,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  transitionEnd = 'transitionend webkitTransitionEnd oTransitionEnd ' + 'otransitionend MSTransitionEnd';

  smartfields = {};

  window.smartfields = smartfields;

  smartfields.FileField = (function() {

    function FileField($elem) {
      var _this = this;
      this.$elem = $elem;
      this.$browse_btn = this.$elem.find('.smartfields-btn-browse');
      this.id = this.$browse_btn.attr('id');
      this.$delete_btn = $("#" + this.id + "_delete");
      this.$upload_btn = $("#" + this.id + "_upload");
      this.$progress = $("#" + this.id + "_progress").hide();
      this.$current = $("#" + this.id + "_current");
      this.$errors = $("#" + this.id + "_errors");
      this.$browse_btn.change(function() {
        var file_name;
        file_name = _this.$browse_btn.val().split('\\').pop();
        return _this.$current.val(file_name);
      });
      this.$current_btn = $("#" + this.id + "_link").click(function() {
        var href;
        href = $(this).data('href');
        if (href) {
          return window.open(href, $(this).data('target')).focus();
        }
      });
      this.$upload_btn.parent().hide();
      if (!this.$current.val()) {
        this.$delete_btn.parent().hide();
        this.$current_btn.parent().hide();
      }
      this.$delete_btn.click(function() {
        var post_data;
        post_data = {
          'csrfmiddlewaretoken': _this.$browse_btn.data('csrfToken')
        };
        post_data["" + (_this.$browse_btn.attr('name')) + "-clear"] = "on";
        return $.post(_this.options.url, post_data, function(data, textStatus, jqXHR) {
          if (data.state === 'ready') {
            _this.$current.val('');
            _this.$current_btn.data('href', "").parent().hide();
            _this.$delete_btn.parent().hide();
            return _this.fileDeleted(data, textStatus, jqXHR);
          }
        });
      });
      this.options = {
        'browse_button': this.id,
        'container': this.$elem[0],
        'file_data_name': this.$browse_btn.attr('name'),
        'multipart_params': {
          'csrfmiddlewaretoken': this.$browse_btn.data('csrfToken')
        },
        init: {
          Init: $.proxy(this.Init, this),
          PostInit: $.proxy(this.PostInit, this),
          OptionChanged: $.proxy(this.OptionChanged, this),
          Refresh: $.proxy(this.Refresh, this),
          StateChanged: $.proxy(this.StateChanged, this),
          UploadFile: $.proxy(this.UploadFile, this),
          BeforeUpload: $.proxy(this.BeforeUpload, this),
          QueueChanged: $.proxy(this.QueueChanged, this),
          UploadProgress: $.proxy(this.UploadProgress, this),
          FilesRemoved: $.proxy(this.FilesRemoved, this),
          FileFiltered: $.proxy(this.FileFiltered, this),
          FilesAdded: $.proxy(this.FilesAdded, this),
          FileUploaded: $.proxy(this.FileUploaded, this),
          ChunkUploaded: $.proxy(this.ChunkUploaded, this),
          UploadComplete: $.proxy(this.UploadComplete, this),
          Error: $.proxy(this.Error, this),
          Destroy: $.proxy(this.Destroy(this))
        }
      };
      $.extend(this.options, this.$browse_btn.data('plupload'));
      this.uploader = new plupload.Uploader(this.options);
      this.uploader.init();
      this.form_submitted = null;
      this.$form = this.$elem.closest('form').submit(function() {
        if (!(_this.form_submitted != null) && _this.uploader.files.length > 0) {
          _this.form_submitted = true;
          _this.uploader.start();
          return false;
        } else {
          return !(_this.form_submitted != null) || !_this.form_submitted;
        }
      });
    }

    FileField.prototype.setProgress = function(index, percent, task_name) {
      var bar, len, _i, _len, _ref, _results;
      if (!(index != null) && !(percent != null) && !(task_name != null)) {
        _ref = this.$progress.children();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          bar = _ref[_i];
          _results.push($(bar).attr('aria-valuenow', 0).width("0%").find('span').html("Ready"));
        }
        return _results;
      } else {
        len = this.$progress.children().length;
        bar = this.$progress.children()[len - 1 - index];
        $(bar).attr('aria-valuenow', percent).width("" + percent + "%").find('span').html("" + percent + "% " + task_name);
        if (index > 0) {
          bar = this.$progress.children()[len - index];
          $(bar).attr('aria-valuenow', 100 - percent).width("" + (100 - percent) + "%");
        }
        return this.$current.val("" + task_name + "... " + percent + "%");
      }
    };

    FileField.prototype.handleResponse = function(data, complete, error) {
      var completed, delayedComplete, progress,
        _this = this;
      if (this.form_submitted && data.state !== 'error') {
        this.form_submitted = false;
        return this.$form.submit();
      } else if (data.state === 'complete') {
        completed = false;
        delayedComplete = function() {
          if (!completed) {
            completed = true;
            _this.$progress.hide();
            _this.setProgress();
            _this.$delete_btn.parent().show();
            _this.$current.val(data.file_name);
            _this.$current_btn.data('href', data.file_url).parent().show();
            return typeof complete === "function" ? complete(data) : void 0;
          }
        };
        this.setProgress(1, 100, data.task_name);
        this.$progress.one(transitionEnd, function() {
          return delayedComplete;
        });
        return setTimeout(delayedComplete, 2000);
      } else if (data.state === 'error') {
        this.setErrors(data.messages);
        return typeof error === "function" ? error(data) : void 0;
      } else if (data.state !== 'ready') {
        if (data.state === 'in_progress') {
          progress = Math.round(100 * data.progress);
          this.setProgress(1, progress, data.task_name);
        }
        return setTimeout((function() {
          return $.get(_this.options.url, function(data) {
            return _this.handleResponse(data);
          });
        }), 3000);
      }
    };

    FileField.prototype.fileDeleted = function(data, textStatus, jqXHR) {};

    FileField.prototype.setErrors = function(errors) {
      var e, i, _i, _len, _results;
      this.$errors.empty();
      if (errors != null) {
        this.$progress.hide();
        this.setProgress();
        this.$elem.addClass('has-error');
        this.$current.val("ERROR");
        _results = [];
        for (i = _i = 0, _len = errors.length; _i < _len; i = ++_i) {
          e = errors[i];
          _results.push(this.$errors.append($("<li>", {
            'id': "error_" + i + "_" + this.id,
            'class': "bg-danger"
          }).html($("<strong>").text(e))));
        }
        return _results;
      } else {
        return this.$elem.removeClass('has-error');
      }
    };

    FileField.prototype.Init = function() {};

    FileField.prototype.OptionChanged = function() {};

    FileField.prototype.Refresh = function() {};

    FileField.prototype.StateChanged = function() {};

    FileField.prototype.UploadFile = function() {};

    FileField.prototype.QueueChanged = function() {};

    FileField.prototype.FilesRemoved = function(up, file) {};

    FileField.prototype.FileFiltered = function(up, file) {};

    FileField.prototype.ChunkUploaded = function() {};

    FileField.prototype.UploadComplete = function() {};

    FileField.prototype.Error = function(up, error) {
      console.log("pluplod error:");
      console.log(error);
      switch (error.code) {
        case plupload.FILE_EXTENSION_ERROR:
          this.setErrors(["Unsupported file type: " + error.file.name]);
          return up.splice(0, up.files.length);
        default:
          return this.setErrors([error.message]);
      }
    };

    FileField.prototype.Destroy = function() {};

    FileField.prototype.PostInit = function(up) {
      var status;
      this.$browse_btn.click(function() {
        return false;
      }).replaceWith(this.$elem.find(".moxie-shim").hide().find('input'));
      this.$upload_btn.click(function() {
        up.start();
        return false;
      });
      status = this.$browse_btn.data('status');
      if ((status != null ? status.state : void 0) === 'in_progress') {
        this.$progress.show();
      }
      return this.handleResponse(status);
    };

    FileField.prototype.FilesAdded = function(up, files) {
      var _ref;
      this.$current.val(files[0].name);
      this.$upload_btn.parent().show();
      this.$progress.show();
      if ((_ref = this.$delete_btn) != null) {
        _ref.parent().hide();
      }
      up.splice(0, up.files.length - 1);
      return this.setErrors();
    };

    FileField.prototype.BeforeUpload = function() {
      this.setProgress();
      return this.$upload_btn.parent().hide();
    };

    FileField.prototype.UploadProgress = function(up, file) {
      return this.setProgress(0, file.percent, "Uploading");
    };

    FileField.prototype.FileUploaded = function(up, file, data) {
      var response;
      if (data.status === 200) {
        response = $.parseJSON(data.response);
        return this.handleResponse(response);
      } else if (data.status === 409) {
        response = $.parseJSON(data.response);
        return console.log(response);
      }
    };

    return FileField;

  })();

  smartfields.MediaField = (function(_super) {

    __extends(MediaField, _super);

    function MediaField($elem) {
      this.$elem = $elem;
      MediaField.__super__.constructor.call(this, this.$elem);
      this.$current_preview = $("#" + this.id + "_preview");
    }

    MediaField.prototype.fileDeleted = function(data, textStatus, jqXHR) {
      return this.$current_preview.empty();
    };

    MediaField.prototype.handleResponse = function(data) {
      var _this = this;
      return MediaField.__super__.handleResponse.call(this, data, function(data) {
        var $preview, persistentLoader;
        $preview = _this.$current_preview.empty().html(data.html_tag);
        persistentLoader = function(attempt) {
          return _this.$current_preview.find("[src]").each(function() {
            return $(this).load(function() {}).error(function() {
              console.log("not loaded: " + attempt);
              if (attempt > 0) {
                return setTimeout((function() {
                  $preview.empty().html(data.html_tag);
                  return persistentLoader(attempt - 1);
                }), 1000);
              }
            });
          });
        };
        return persistentLoader(5);
      });
    };

    MediaField.prototype.BeforeUpload = function() {
      this.$current_preview.empty();
      return MediaField.__super__.BeforeUpload.apply(this, arguments);
    };

    return MediaField;

  })(smartfields.FileField);

  smartfields.LimitedField = (function() {

    function LimitedField($elem) {
      var $feedback, $field, maxlength;
      this.$elem = $elem;
      $field = this.$elem.find(".smartfield");
      $feedback = this.$elem.find(".feedback-counter");
      maxlength = parseInt($field.attr("maxlength") || $field.data("maxlength"));
      if (!isNaN(maxlength)) {
        $field.keyup(function() {
          var content, current_length;
          content = $field.val();
          current_length = content.length + content.split('\n').length - 1;
          if (current_length > maxlength) {
            content = content.substr(0, maxlength);
            $field.val(content);
          }
          $feedback.text(maxlength - current_length);
          return true;
        }).trigger('keyup');
      }
    }

    return LimitedField;

  })();

  $(document).ready(function() {
    $(".smartfields-filefield").each(function() {
      new smartfields.FileField($(this));
      return null;
    });
    $(".smartfields-mediafield").each(function() {
      new smartfields.MediaField($(this));
      return null;
    });
    $(".smartfields-limitedfield").each(function() {
      new smartfields.LimitedField($(this));
      return null;
    });
    return null;
  });

}).call(this);
